package main

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
	"user-management/store"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

type Person struct {
	FirstName  string `json:"firstName"`
	SecondName string `json:"secondName"`
	DOB        string `json:"dob"`
	Email      string `json:"email"`
}

// create new gin router, register a get route with /users/:id and assigns getUser function as the handler
// create a new instance of the response recorder, which is used to capture the response
// using /users/123. nil as the http request, router handles the request and then the response is generated by the router
// assert – asserts that the response status code captured in the variable is equal to the http status code (404 for this case)
// responseBody declares responseBody to store the JSON response body
// err := json.Unmarshal(w.Body.Bytes(), &responseBody) attempts to parse the response body captured as JSON and store it, if error occurs here it will be assigned to the err variable
// if err != nil, checks if there was an error during the JSON parsing and logs if so
// expected := map[string]interface{}{"message": "User not found"} – it declares the variable expected with the JSON body response
// assert.Equal(t, expected, responseBody) – it asserts that the responseBody matches the expected response body. this ensures that the actual response body matches the expected response body, indicating that the "getUser" function returned the correct response for tests
func TestGetUser(t *testing.T) {
	router := gin.Default()
	router.GET("/users/:id", getUser)

	w := httptest.NewRecorder()

	req, _ := http.NewRequest("GET", "/users/123", nil)

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusNotFound, w.Code)

	var responseBody map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &responseBody)
	if err != nil {
		log.Fatal(err)
	}

	expected := map[string]interface{}{
		"message": "User not found",
	}
	assert.Equal(t, expected, responseBody)
}


func TestGetAllUsers(t *testing.T) {
	router := gin.Default()
	router.GET("/users", getAllUsers)

	store.PersonStorage = map[string]store.Person{
		"1": {FirstName: "ffion", SecondName: "griffiths", DOB: "05/11/1993", Email: "ffiongriffiths@example.com"},
		"2": {FirstName: "minnie", SecondName: "griffiths", DOB: "19/10/2018", Email: "minniegriffiths@example.com"},
	}

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/users", nil)
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var users []store.Person
	err := json.Unmarshal(w.Body.Bytes(), &users)
	assert.NoError(t, err)

	expected := []store.Person{
		{FirstName: "ffion", SecondName: "griffiths", DOB: "05/11/1993", Email: "ffiongriffiths@example.com"},
		{FirstName: "minnie", SecondName: "griffiths", DOB: "19/10/2018", Email: "minniegriffiths@example.com"},
	}
	assert.Equal(t, expected, users)
}

